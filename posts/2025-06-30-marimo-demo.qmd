---
title: "Interactive Data Science with Marimo"
author: "Nipun Batra"
date: "2025-06-30"
categories: [python, interactive, data-science, marimo]
description: "Exploring Marimo's reactive notebook capabilities integrated with Quarto"
---

## Introduction

This post demonstrates the power of [Marimo](https://marimo.io/), a reactive Python notebook that integrates beautifully with Quarto. Unlike traditional notebooks, Marimo automatically updates cells when their dependencies change, creating a truly interactive experience.

## What Makes Marimo Special?

Marimo brings several advantages over traditional notebooks:

- **Reactive execution**: Cells automatically re-run when their inputs change
- **No hidden state**: Clean execution model prevents common notebook pitfalls  
- **Interactive UI elements**: Built-in widgets for creating interactive experiences
- **Reproducible**: Deterministic execution order ensures reproducibility
- **Pythonic**: Notebooks are valid Python scripts

## Interactive Demo

Below are some examples of what Marimo can do. In a live Marimo environment, these would be fully interactive:

### Example 1: Interactive Function Plotting

```{python}
import numpy as np
import matplotlib.pyplot as plt

# This would be controlled by interactive sliders in Marimo
n_points = 50  # Slider: 10-100
func_type = "sine"  # Dropdown: sine, cosine, tangent

x = np.linspace(0, 2*np.pi, n_points)

if func_type == "sine":
    y = np.sin(x)
    title = "Sine Wave"
elif func_type == "cosine":
    y = np.cos(x)
    title = "Cosine Wave"
else:  # tangent
    y = np.tan(x)
    title = "Tangent Wave"

plt.figure(figsize=(10, 6))
plt.plot(x, y, 'b-', linewidth=2)
plt.title(f"{title} with {n_points} points")
plt.xlabel("x")
plt.ylabel("y")
plt.grid(True, alpha=0.3)
plt.axhline(y=0, color='k', linewidth=0.5)
plt.axvline(x=0, color='k', linewidth=0.5)
plt.show()

print(f"Current settings: {n_points} points, {func_type} function")
```

*In Marimo: Adjusting the sliders would instantly update this plot!*

### Example 2: Interactive Data Analysis

```{python}
# These would be interactive sliders in Marimo
sample_size = 500  # Slider: 100-1000
noise_level = 0.5  # Slider: 0.1-2.0

np.random.seed(42)

# Generate sample data
x_data = np.linspace(0, 10, sample_size)
y_true = 2 * x_data + 1
y_noisy = y_true + noise_level * np.random.randn(sample_size)

# Simple linear regression
coeffs = np.polyfit(x_data, y_noisy, 1)
y_pred = np.polyval(coeffs, x_data)

# Create visualization
plt.figure(figsize=(12, 5))

# Plot 1: Data and fit
plt.subplot(1, 2, 1)
plt.scatter(x_data, y_noisy, alpha=0.6, s=1, label='Noisy data')
plt.plot(x_data, y_true, 'r-', linewidth=2, label='True function')
plt.plot(x_data, y_pred, 'g--', linewidth=2, label=f'Fitted line (slope={coeffs[0]:.2f})')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.title('Linear Regression')
plt.grid(True, alpha=0.3)

# Plot 2: Residuals
plt.subplot(1, 2, 2)
residuals = y_noisy - y_pred
plt.scatter(x_data, residuals, alpha=0.6, s=1)
plt.axhline(y=0, color='r', linestyle='--')
plt.xlabel('x')
plt.ylabel('Residuals')
plt.title('Residual Plot')
plt.grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

# Display statistics
mse = np.mean(residuals**2)
r_squared = 1 - np.sum(residuals**2) / np.sum((y_noisy - np.mean(y_noisy))**2)

print(f"""
Regression Results:
- Sample size: {sample_size}
- Noise level: {noise_level}
- Fitted slope: {coeffs[0]:.3f} (true slope: 2.000)
- Fitted intercept: {coeffs[1]:.3f} (true intercept: 1.000)
- Mean Squared Error: {mse:.3f}
- R-squared: {r_squared:.3f}
""")
```

*In Marimo: Change the sample size or noise level sliders and watch the regression update instantly!*

## Key Features Demonstrated

### 1. Reactive Updates
Try adjusting the sliders in the notebook above - notice how all dependent visualizations update automatically without manually re-running cells.

### 2. Interactive Widgets
Marimo provides a rich set of UI elements:
- Sliders for numeric inputs
- Dropdowns for categorical selections  
- Text inputs, checkboxes, and more

### 3. Real-time Data Analysis
The linear regression example shows how you can explore data interactively, adjusting parameters and immediately seeing the impact on your analysis.

## Try the Full Interactive Version

To experience the full interactivity shown above, you can run the Marimo notebook locally:

1. **Install marimo**: `pip install marimo matplotlib numpy`
2. **Download the notebook**: Save [this file](2025-06-30-marimo-demo.py) locally
3. **Run interactively**: `marimo edit 2025-06-30-marimo-demo.py`
4. **Play with the sliders** and see the plots update in real-time!

## Getting Started with Marimo

To use Marimo in your own projects:

1. Install marimo: `pip install marimo`
2. Create a new notebook: `marimo edit my_notebook.py`
3. For Quarto integration: `quarto add marimo-team/quarto-marimo`
4. Include your notebook in Quarto documents using the `{marimo}` code block

## Conclusion

Marimo represents an exciting evolution in computational notebooks, bringing reactive programming concepts to data science workflows. Its integration with Quarto makes it perfect for creating interactive blog posts and documentation.

The combination of Marimo's interactivity with Quarto's publishing capabilities opens up new possibilities for sharing reproducible, engaging data science content.

Try experimenting with the interactive elements above to get a feel for Marimo's reactive nature!