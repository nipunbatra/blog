---
title: "Interactive Data Science with Marimo"
author: "Nipun Batra"
date: "2025-06-30"
categories: [python, interactive, data-science, marimo]
description: "Exploring Marimo's reactive notebook capabilities integrated with Quarto"
filters:
  - marimo-team/marimo
---

## Introduction

This post demonstrates the power of [Marimo](https://marimo.io/), a reactive Python notebook that integrates beautifully with Quarto. Unlike traditional notebooks, Marimo automatically updates cells when their dependencies change, creating a truly interactive experience.

## What Makes Marimo Special?

Marimo brings several advantages over traditional notebooks:

- **Reactive execution**: Cells automatically re-run when their inputs change
- **No hidden state**: Clean execution model prevents common notebook pitfalls  
- **Interactive UI elements**: Built-in widgets for creating interactive experiences
- **Reproducible**: Deterministic execution order ensures reproducibility
- **Pythonic**: Notebooks are valid Python scripts

## Interactive Demo

**Try these live interactive examples!** Adjust the sliders and dropdowns to see the content update in real-time:

### Example 1: Simple Interactive Slider

```python {.marimo}
#| echo: true
import marimo as mo
slider = mo.ui.slider(1, 10, 1, label="Look, a slider!")
slider
```

```python {.marimo}
mo.md("NaN" * slider.value + " Batman!")
```

### Example 2: Interactive Matplotlib Plot

```python {.marimo}
#| echo: true
import matplotlib.pyplot as plt
import numpy as np

# Interactive controls for the plot
n_points = mo.ui.slider(10, 100, value=50, label="Number of points:")
func_type = mo.ui.dropdown(["sine", "cosine", "tangent"], value="sine", label="Function:")

mo.hstack([n_points, func_type], justify="start", gap=2)
```

```python {.marimo}
# Generate the plot based on controls
x = np.linspace(0, 2*np.pi, n_points.value)

if func_type.value == "sine":
    y = np.sin(x)
elif func_type.value == "cosine":
    y = np.cos(x)
else:  # tangent
    y = np.tan(x)

plt.figure(figsize=(10, 6))
plt.plot(x, y, 'b-', linewidth=2, label=f'{func_type.value.capitalize()} wave')
plt.title(f'{func_type.value.capitalize()} function with {n_points.value} points')
plt.xlabel('x')
plt.ylabel('y')
plt.grid(True, alpha=0.3)
plt.legend()

if func_type.value == "tangent":
    plt.ylim(-5, 5)

plt.show()
```

### Example 3: Interactive Text and Dropdown

```python {.marimo}
#| echo: true
# Interactive controls for text generation
word_count = mo.ui.slider(1, 20, step=1, value=5, label="Word count:")
greeting = mo.ui.dropdown(["Hello", "Hi", "Hey", "Greetings"], value="Hello", label="Greeting:")

mo.md("**Text Generation Controls:**")
mo.hstack([word_count, greeting], justify="space-between", gap=2)
```

```python {.marimo}
# Reactive text that updates when controls change
words = ["world", "there", "friend", "everyone", "folks", "people", "team", "readers", "visitors", "audience"] * 2

selected_words = words[:word_count.value]
message = f"{greeting.value} {' '.join(selected_words)}!"

mo.md(f"""
**Generated Message:**

> {message}

**Settings:**
- Greeting: {greeting.value}
- Word count: {word_count.value}
- Words used: {', '.join(selected_words)}
""")
```

## Key Features Demonstrated

### 1. Reactive Updates
Try adjusting the sliders in the examples above - notice how all dependent content updates automatically without manually re-running cells.

### 2. Interactive Widgets
Marimo provides a rich set of UI elements:
- Sliders for numeric inputs
- Dropdowns for categorical selections  
- Text inputs, checkboxes, and more

### 3. Real-time Content Generation
The examples show how you can create interactive content that responds to user input, generating text and messages dynamically.

## Try More Complex Examples

The examples above demonstrate basic interactivity. For more complex scenarios, you can:

1. **Download the full notebook**: Save [this file](2025-06-30-marimo-demo.py) locally
2. **Run with marimo**: `pip install marimo && marimo edit 2025-06-30-marimo-demo.py`
3. **Explore additional features** like multiple linked widgets, complex layouts, data visualization, and advanced reactive patterns

## Getting Started with Marimo

To use Marimo in your own projects:

1. Install marimo: `pip install marimo`
2. Create a new notebook: `marimo edit my_notebook.py`
3. For Quarto integration: `quarto add marimo-team/quarto-marimo`
4. Include your notebook in Quarto documents using the `{marimo}` code block

## Conclusion

Marimo represents an exciting evolution in computational notebooks, bringing reactive programming concepts to data science workflows. Its integration with Quarto makes it perfect for creating interactive blog posts and documentation.

The combination of Marimo's interactivity with Quarto's publishing capabilities opens up new possibilities for sharing reproducible, engaging data science content.

Try experimenting with the interactive elements above to get a feel for Marimo's reactive nature!